<?php

declare (strict_types=1);

namespace framework\clarity\Logger;

/**
 * Перечисление LogLevel представляет различные уровни логирования, которые используются для классификации
 * важности или серьезности сообщений в процессе работы приложения.
 *
 * Каждый уровень логирования представляет собой строковое значение и может быть преобразован в целочисленное
 * представление для упорядочивания по важности.
 *
 * Уровни логирования:
 * - `EFF` (eff) - Самый низкий уровень, используемый для отладочных или вспомогательных сообщений.
 * - `FATAL` (fatal) - Уровень для критических ошибок, которые могут привести к сбою приложения.
 * - `ERROR` (error) - Уровень для сообщений об ошибках, требующих внимания.
 * - `WARNING` (warning) - Уровень для предупреждений, которые не блокируют работу, но могут быть важными.
 * - `INFO` (info) - Уровень для информационных сообщений, которые могут быть полезны для мониторинга работы приложения.
 * - `DEBUG` (debug) - Уровень для детализированных отладочных сообщений, полезных при разработке.
 * - `TRACE` (trace) - Самый детализированный уровень, используемый для трассировки выполнения кода.
 * - `ALL` (all) - Охватывает все уровни логирования, позволяя записывать сообщения всех типов.
 *
 * @package clarity/Logger
 */
enum LogLevel: string
{
    case EFF = 'eff';
    case FATAL = 'fatal';
    case ERROR = 'error';
    case WARNING = 'warning';
    case INFO = 'info';
    case DEBUG = 'debug';
    case TRACE = 'trace';
    case ALL = 'all';

    /**
     * @return int
     */
    public function toInt(): int
    {
        return match ($this) {
            self::EFF => 0,
            self::FATAL => 1,
            self::ERROR => 2,
            self::WARNING => 3,
            self::INFO => 4,
            self::DEBUG => 5,
            self::TRACE => 6,
            self::ALL => 7,
        };
    }
}